Type    Size     Min Value     Max Value
Byte    8 Bit    -128          127
Short   16 Bit   -32768        32767
Int     32 Bit   (-2^31)       (-2^31 -1)
Long    64 Bit   (-2^63)       (-2^63-1)


Type    Size     Significant Bits    Exponent Bits  Decimal Digits
Float   32       24                  8              6-7
Double  64       53                  11             15-16

Değişkene değer ataması yapılırken maksimum performans almak için doğru değişken tipini kullanmak gerekir.
Değişken türünü belirtmediğinde eğer sayı Int aralığından büyük değilse default tip Int olur.
Değişken türünü belirtmediğinde eğer sayı Int aralığından büyükse default tip Long olur.

Long değişken için sayının sonuna "L" konularak deger ataması yapılabilir.
Float değişken için sayının sonuna "F" ve "f" konularak değer ataması yapılabilir.

Sayı yazarken karışıklığı önlemek amacıyla alt çizgi kullanabilirsin.Derlemede alt çizgisiz olarak alır
ex -> val one=1_000_000_000

Boxed -> Değişkenin obje referansi olarak tutulmasıdır
UnBoxed -> Değişkenin primitive olarak tutulmasidir.

=== operatoru degişkenlerin referansını karsılastırırken kullanılır.
== operatoru değişkenlerin değerini karşılaştırırken kullanılır.

Int? bu ifade değişkenin nullable alabileceğini gösterir.

TYPE CONVERSION

Implicit Type Conversion ->Ortulu - belirgin olmayan şekilde
Explicit Type Conversion ->Açık -> belirgin
*Kotlinde implicit type conversion yoktur

//toByte(), toShort(), toInt(), toLong(), toFloat(), toChar(),toString(),

Değer aralığı kucuk olan tipler buyuk olan tiplere sorunsuz acık(explicit) şekilde dönüştürülür.
Buyuk degeri daha kucuk bir degere dönüştüremezsin hatalı sayı verir

String to Number donusumler için Java'dan aşina olduğumuz tip donusumlerı kullanılabilir

parseByte(),parseShort(),parseInt(), parseLong(), parseDouble(),parseFloat(),

CHARACTERS

Tek tırnakların arasına, harf,sayi, escape char ya da unicode yazarak kullanılır.
Çift tırnak ->String ,char değil

**Number deger alan bir char değişkei int'e çevrilirken,gerçek sayısal degerını almaz.
ASCII tablosundaki sayının değerini alır.
Tek karakter kabul ediyor.
Unicode karakter tanımlamak için kullanabilirsin.

Escape karakterler
'\t' -> Tab Bırakmak için
'\n' ->Alt satır için
'\b' ->backspace için
'\r' ->Satır başı

BOOLEAN

true ya da false deger ataması için kullanılır.
0 ya da 1 boolean olarak kullanılamaz.

&& ->iki koşulda doğruysa true dondurur diğer koşulda false.
|| ->Tek bir koşul doğruysa true döndürür.
and -> && ile aynı
or ->|| ile aynı

ARRAYS
Dizi tanımlamaları için kullanılır
arrayOf(aynı tip degerler)
arrayOf<Any>(farklı tip degerler)
arrayOfNulls<Type>(size) verilen boyut kadar null değer içeren dizi tanımlanır. //Performans düşüklüğü yapar.Kod kalitesini azaltır Any
indexler 0dan başlar

Array<Type>(size){higher order function}
Higher Order function,içerisi dizinin boyutu kadar index'i bir arttırarak çalışır

ByteArray,ShortArray,IntArray,LongArray,DoubleArray,FloatArray gibi tanımlamalarda yapılır.
index değerine atama için set(index,value) ya da [index]=value kullanılabilir.
index degerine ulaşmak için get(index) ya da [index] ile ulaşılabilir.
Arrayın val olarak tanımlanması içerisindeki değerlerin val olması anlamına gelmez,değiştirebilirsin.

STRING

Çift tırnak içerisine yazılan karakterler bütünüdür.
Bir string ifadenin tum karakterlerini tek tek alıp char bir listeye atabilirsin.

Farklı tipteki bir degişkenin onune String bir değişken koyup toplanırsa sonuç string dondurur.
**ancak string bir değişken ya da ifadenin sonuna,+ operator ile, farklı tipte bir değişken toplanırsa hata verir.

Herhangi bir degişken + operatorune ihtiyac duyulmadan direkt olarak "" arasına yazılabilir.
Bunun için sadece $ işaretine ihtiyaç vardir.String template denir.
Eğer değişkenin bir ozelliğine ihtiyac duyacaksanız ${} ifadesi kullanılabilir.

3 tane çift tırnak kullanarak Raw String oluşturulabilir.
trimIndent() fonksiyonu ile bu Raw String'in kenar boşlukları silinebilir.En soldaki karakteri baz alarak siler.

