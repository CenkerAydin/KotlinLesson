CLASSES

Classlar parametre alabilir;
Default değer alabilirler.
Geri dönüş tipi yoktur.

Classın yanına const ekleyebilirsin ->Primary const.

class Car constructor(wheelCount:Int){

}
class Car(wheelCount:Int){

}

class sınıfının içine const ekleyebilirsin -> Secondary const.
Secondary const. sırasının önemi yok

class Car(wheelCount:Int){

    constructor():this() {

    }
}
Secondary const. mecburi olarak primary const. işaret etmek zorunda.
this:() ->Primary const. işaret eder.

bir classtan nesne oluşturmak için
val car0=Car() oluşturur.
oluşturduktan sonra primary const. içindeki parametrelerden oluşan bir parametre verdiyseniz init bloğu çalışır.
primary const. içindeki parametrelerden oluşmayan bir parametre verdiyseniz önce init sonra secondary const.lar çalışır

Javada olduğu gibi default const. kotlin dilinde de mevcut.
Primary const ve secondary const. yazmasanız bile default const. oluşur
Eğer secondary constructorın içini if case ile ayıracaksanız secondary const. overload edip if case durumlarını parametre olarak geçirebilirsiniz.
Bu şekilde daha iyi bir kod yazarsınız.
best practice olarak class ismi büyük fonksiyon ismi küçük başlat.

VISIBILITY MODIFIERS

Javada bir değişkeni herhangi bir erişim belirteci kullanmadan tanımlarsak,
default olarak package-private olur.Yani sadece aynı paket içindeki diğer sınıflardan erişilebilir.

Bu durum kotlinde farklıdır. Herhangi bir erişim belirteci kullanmadan tanımlarsak,
default olarak public olur.

private ->Sadece bağlı bulunduğu class içerisinden erişilebilir.Başka hiçbir yerden erişilemez.(Child class dahil)
public -> Her yerden erişilebilir.
protected ->Bağlı bulunduğu class ve bulunduğu classı miras alan(inheritance) classlar erişebilir sadece.
internal ->Module bazında public olur. Onun dışında her yerde private

protected kotlinde top level tanımlamalarda kullanılamaz.
top level olduğu için hiçbir zaman miras alınamaz o yüzden protected kullanılamaz.

open ve final access modifiersdır.Visibility modifiers ile karıştırma.
PROPERTY VS FIELD
Java dilinden örnek:
field -> String name="Cenk"

property ->

 public String getName(){
    return name;
}
public void setName(String name){
   this.name=name;
}

Kotlinde her şey public tutulur.Encapsulation sağlamak için değişkenler direkt property olur.
Kotlinde field değişken tanımlanmaz.
Kotlinde değişken tanımlandığında arka tarafında get ve set methodları şeklinde bir üretim yapılır.
val name="Cenk" -> direkt olarak property olur.
O yüzden kotlinde encapsulation çok sağlamdır.

Eğer  değişken public ise set fonksiyonunu private yapabilirsin ama get fonksiyonunu
private yapamazsın sebebi ise, eğer public ise her yerden erişebilirsin ama get fonksiyonu private olursa
sadece o class içinde erişilebilir olur.

INHERITANCE
Kotlinde bütün classlar default olarak final tanımlanır.
Eğer bir classı inherit almak istiyorsan o classın önünde open keywordu olması lazım.
bir classı inherit almak istiyorsanız : işaretini kullanmanız lazım.
inherit aldığın sınıftan bir classı override etmeden child classta aynı parametre,geri dönüş
şekliyle kullanamazsın.
bir class birden fazla classı inherit alamazsın.
inherit aldığın bir classın en az bir const. kullanman gerek.
Override ->fonksiyonu veya değişkeni alıp child classda farklı bir işlevde kullanmak için kullanılır.(Polymorphism ilkesi)
super keywordu ust classtaki fonksiyonu işaret eder.
Eğer override fonksiyonu üst classtaki işlevi yapmasını istiyorsanız super keywordunu kullanmanız gerekir.
Bir class başka bir classı inherit ediyorsa o classın sahip olduğu her şeyi alır.
inherit edilen classa genel olarak parent-class
inherit alan classa child-class denir.
Karmaşıklığı önlemek için kullanılır.
Bazen parent-classların sahip olduğu yetkinlikleri child-classlarda değiştirmek isteyebilirsin.(Overload)

ABSTRACT CLASS-INTERFACES

Abstractler ve interfacelerin tek başına olmaları anlamsızdır,
inherit alınmaları veya impelement edilmeleri lazım

Abstraction içselleştirerek öğrendiğinizde bir üst seviyeye çıkarsınız.
Abstractlar sözleşme metni gibi düşünebilirsin.
Abstract classı bir şablon gibi düşünebilirsin.
Burada final ve open modifierları kullanmak anlamsız ve yanlıştır.
Abstract olarak yazılmış classa yeni eklenen tüm abstract yapılar,
Tum child classlarda override edilmek zorundadır.
Eğer abstract classınıza eklemek istediğiniz opsiyonel yapılar varsa,bunları child classların tamamında override
etmek zorunda olmayalım diye, open keywordu ile tanımlayabiliriz.
Abstract bir class, abstract bir classı miras alırsa, abstract yapıları override etmek zorunda değildir.
Abstract fun, bodysi olmaz. Propertylerinde default değeri olmaz.
Abstract classlar aynı zamaanda instance'i oluşturulamayan classlar.
Bu sebeple singleton gibi patternler için de kullanılabiliyorlar.
abstract keywordu miras alınabilmeyi sağlar.

Eğer abstractı classı, düz bir class inherit alıyorsa tüm yapıları override etmek zorunda
Eğer abstract class override edip düz class tarafından inherit alıyorsa düz class o yapıyı override etmeyebilir.
Abstract class bir abstract class tarafından inherit alıyor tüm yapıları override etmek zorunda değilsin.

Interfaceler implement edilir.İmplement işlemi extend gibi iki nokta ile yapılır.
Interface neleri yapabileceğini gösterir.(Yüzmeyi bilmek interface, yürümek abstract default çünkü.)
Interfacelerin abstract classlardan en buyuk farkı state(değeri)  tutamıyor olusları.State tutması için değerinin değiştirilmesi gerekir.
Interfaceler bir yerden tetiklenmeyi ,implement etmeyi beklerler.
Property initializers are not allowed in interfaces
Interface içerisindeki initial değeri olmayan bir property(field) ya da bodysi olmayan bir fonksiyon
abstract olarak da tanımlanabilir.
Interfaceleri anlamı gereği final yapamazsınız.Open yazılması gereksizdir.(Redundant)

Bir interface içerisindeki fonksiyonlardan body'si olanlar override edilmek zorunda değildir.
Body'si olmayan tüm fonksiyonlar ise class'a implement edildiğinde override edilmek zorunda.

Interfacelere tanımlanan propertylerde (field) initial değer alma zorunluluğu yoktur.

Eğer implement edilen interface, başka bir interfacei implement ediyorsa ve bu interfacein uyeleri child interfacede
override edilmiş ise Child interfacei implement eden classda bu propertylerin override edilme zorunluluğu kalkar.

Bir class Abstract ise bir interface'i implement ettikten sonra bu interface'in fonksiyonlarını override etmek zorunda kalmıyor.

Propertyler (field) de interfacelere tanımlanabilirler.
Propertylerden de değer ataması yapılmamış olanlar zorunlu olarak override edilirler.
Eğer property get fonksiyonu ile bir statik değer geri donuyorsa, override etme zorunluluğu kalkar.

Interface içerisine tanımlı ve override edilme zorunluluğu olan propertyler (field)
primary constructor içerisinde de override edilebilirler.

Body'si olan (override edilme zorunluluğu olmayan) bir interface fonksiyonu override eidlirse,
override edildiği yerde body'si içerisinden super'i çağrılabilir.(Çağırmak zorunda değilsiniz.)

Birden fazla interface bir classa tanımlanabilir.
Tanımlanırken aralarına virgul koyulur.

: işaretinden sonra yapının sonuna() geliyorsa classtır (inheritance) alır.
: işaretinden sonra yapının sonunda () yoksa interfacedir(implement) edilir.

2 farklı interface'in aynı fonksiyonları olması durumunda, bu fonksiyonların override edilmesi
sırasında aynı fonksiyonu 2 kere yazarak override edemeyiz.
Eğer implement ettiğimiz interfacelerin aynı isimde fonksiyonları bulunuyorsa,
tek bir fonksiyon override işlemi yapılır. Bunun içerisinden hangisinin bodysine erişmek istiyorsak
o interfacein ismini <> işaretleri arasına yazmamız gerekiyor.

Eğer implement edilen 2 interface de aynı fonksiyonlar varsa bu durumda bodyleri olsa da override edilmeleri zorunludur.

DATA CLASS


Data classlar en azından mutlaka 1 parametre almak zorundadır.
Parametreler mutlaka val ya da var ile tanımlanmak zorundadır.
Open, abstract, sealed, inner class yapılamaz.
Tüm data classları final olduğu için final modifieri redundant uyarısı verir.
Bir class inherit edemez ama data classlar başka classları inherit edebilir.

Equals, hashCode, toString, copy, componentN fonksiyonları arka planda default olarak oluştururlar.
Düz classdan farkı otomatik olarak üstteki fonksiyonlar vardır.Yazılmasına gerek yok.
equals -> value, parametre karşılaştırması
hashCode -> obje karşılaştırması
toString ->classın içerdiği verileri yazdırır.
copy ->O classın birebir aynısını kopyalar.
componentN -> parametre sayısı kadar yazılır. Kodun daha temiz ve okunabilir olmasını ve descructturing declaration yapılmasını sağlar.
Const. içindeki fonksiyonlar için component fonksiyonları yazılır.Her biri için geri dönüş değeri olarak yazılır.
Yukarıdaki fonksiyonlardan biri override edilirse, oto generate edilen hali yazılmaz.
Yukarıdaki fonksiyonlar sadece primary const. içerisindeki değişkenlerle çalışır.
Data classlarda constructorun içinde parametre tanımlamakla, const. dışında parametre tanımlamak arasında fark var.

componentN fonksiyonları sebebiyle destructturing declaration olarak data classlar set edilebiliyor

toString gibi fonksiyonlarda primary const. değişkenleri kullanıldığı için val ya da var yazılmak zorundadır.
primary const içinde val ya da var yazmanız classın içinde başka fonksiyonda veya class dışında o parametreye
erişimi sağlar.

Pair, Triple özelleştirilmiş generic data classlar mevcut

ENUM CLASS
Tip güvenliğini (type-safety) sağlar.
Kullanım amacı aynı veri kümelerinin gruplanabilir olmasını sağlar.
Opsiyonların tamamının neler olduğunu rahatça görebilmemizi sağlar.

abstract, open, inner, sealed olamazlar.
Yapısı gereği zaten finaldırlar. final keywordu kullanmak redundant uyarısı verir.

ozunde class oldukları için, constructor kullanabilirler ve bu constructor içerisinde veri tutabilirler.
Java karşılığında bu enum sabitleri static final classlar şeklinde tutulurlar.
Bu sayede kullanırken bu sabitlerin nesnesini oluşturmak zorunda kalmayız.

Enum classlarının nesnesi oluşturulamaz.

Her enum sabiti final name:String ve final ordinal:Int değişkenlere default olarak sahiptir.
name ifadesi, enumın kendisinin string halini verir.
ordinal ifadesi, enumın sabitinin indexini verir ve 0'dan başlar.
Bu değişkenler final oldukları için, enum sabitleri içerisinde override edilemezler.
Enum sabitleri bir class olarak tutulur.
Tüm enum sabitleri arka planda enum classını miras alır.
Enum classlarda sadece toString override edilir.
Enumların nesnesı oluşturulamaz.Const. private
Enum sabitindeki toStringi enum sabiti yerine başka çıktı almak istediğinizde kullanın.
Enum sabitinin ismini almak istiyorsanız name vardır zaten.

enum classlar herhangi bir başka classı miras alamazlar.
enum classlar herhangi bir interface'i implement edebilirler.
enum classlar abstract propertyler ya da abstract func'lar alabilirler.
Bunları aldıklarında tüm sabitler bu abstract yapıları override etmek zorundadır.

Bir open function da yazılabilir. Open olmasından dolayı override etme zorunluluğu yoktur.
Ancak open olarak belirtilen func'nun bodysi olmak zorundadır.

SEALED CLASS

Sınırlı kümede, gruplanabilir, classlar yazmayı sağlar.
Kısıtlanmış bir class hiyerarşisi kurabilmemizi sağlar.
Bu classlar arka planda static olarak tutulmazlar.
Enumarationlardan en buyuk farkı budur.
Enumlar verileri gurplarken, sealed classlar classları gruplar.

Sealed classlar abstract classlardır aynı zamanda.
Abstract oldukları için open olmazlar.
Abstract class oldukları için final olamazlar. Anlamsal olarak zaten saçmadır.

Sealed classların nesnesi oluşturulamaz.
Constructorları protected ve private olarak bulunur.

Sealed classları miras alan subclasslar final oldukları için miras alınamazlar. SDK'ler için önemlidir.
Sealed classın sub classlarının neler olduğu compiletime da bilinmektedir.
Bundan dolayı when ve if yapısı gibi yazımlarda else caslerinin yazımına ihtiyac duymazlar.

Sealed classları extend alan subclasslar eskiden aynı dosya üzerinde bulunma zorunluluğu vardı.
Bu zorunluluk esnetilerek aynı package içerisinde olmaya kadar genişletildi.
Ancak aynı package dışına çıkıp, bir sub classa sealed classı miras olarak vermek isterseniz buna izin verilmez
SDK yazarken bu kısıtlama önemlidir.

Sealed classlar içerisine object tanımlamaları da yapılabilir.
Sealed classlar içerisine sadece object tanımı yaparsanız, bu kullanımın enumarationdan teknik olarak
hiçbir farkı kalmıyor.Enum class kullan.

Enum classlar içinde class tutmaz sabit tutar.Sealed classlar içinde class tutar.
Enum sabitleri kendi içlerinde özelleştirilemez.Sealed classlar içindeki classlar özelleştirilebilir.

NESTED INNER CLASS

Nested classlar outer classın uye propertylerine ya da fonksiyonlarına erişemezler.
Nested classlar static olarak saklanırlar.
Bundan dolayı da outer class uzerinden nested classa erişmek istemeniz durumunda Outer.NestedClass şeklinde erişebilirsiniz.

Inner classlar static olarak tutulmazlar. Bundan dolayı erişim yapmak istediğimizde
Outer.InnerClass() şeklinde outer classın da instanceini oluşturmamız gerekmektedir.
Bundan dolayı inner class outer classın tüm elemanlarına erişebilir. Private olsa dahi.

Inner classın içerisine yeni bir nested class eklenememektedir.Ancak yine inner class ekleyebilirsiniz.
Nested classın içerisine ise bir nested ya da inner fark etmeksizin class ekleyebilirsiniz.

INLINE CLASS

@JvmInline annotation ile birlikte kullanılmak zorunda.
value class formatında yazılır.Const. tek parametre alır.
class içinde şu an icin sadece bir tane değişken kabul etmektedir.
value classların dokumantasyonunda inline classların ileride birden fazla değişken
alabilmesine izin verileceği yazıyor.
ikinci değişkene atama yaparsan ->Value class cannot have properties with backing fields bu hatayı alırsın.
val accountNumber2:Long=123424124 ->bu şekilde yapamazsın
val accountNumber:Long
        get() {
            return 1234563124
        }  -> bu şekilde izin var çünkü backing fields oluşturmuyor arkada
        fun getAccountNumber2():Long{
                return 1234563124
            } bu kullanımile aynı
inline classlar ile init blocku kullanılabilir.
inline classların belirtilen constructorları java kodunda private olarak bulunurlar.
Bundan dolayı zaten istesek de bu constructorlarla nesne oluşturamayız.
Ama bunu yapabiliyor gibi görünmemizin sebebi, gerçekte o nesnenin hiç yaratılmıyor oluşu sebebiyle.
Bizin nesne oluştururken gördüğümüz şey aslında const. içindeki değişkenin kendisi

İnline classlar içinde property tanımlanmasına izin verilir. Ancak bu propertynin backing fieldi olamaz.

Inline classlar herhangi bir interfacei implement edebilirler, bir başka classı miras alamazlar.

Inline classlar miras alınamaz. Cunku default olarak finallardır ve değiştirilemezler.
Open keyworduyle beraber kullanılamaz. Final keywordu vermek de redundant verir.
Abstract,sealed keyword ile de kullanılamaz.
wrapper gibi düşün.

TYPE ALIAS

Nested ya da local typeAlias kullanımı desteklenmiyor.
TypeAliaslar arka planda yeni bir class oluşturmaz. Sadece etiketleme yaparlar.


SINGLETON

Bir classın nesnesine kaç kere erişildiğini nasıl sayarız.
Counter değeri tutarız. Ama ilgili classın nesnesinin t anında sadece 1 tane olmasından emin olmanız lazım.
Herhangi bir t anında ilgil classın nesnesinde sadece 1 tane olduğunu garanti eden tasarım şeması
Static keywordu memory temizliği yapan garbage collectora dokunma izni vermiyor.
Bilinçsiz şekilde kullanırsanız memoryi gereksiz işgal ettirirsin. OutofMemoryException alma ihtimalini arttırır.
İş görüşmelerinde java'da singleton nasıl yaparsınız beklenir.
Şart->
classın 1 tane constructor olduğundan emin ol
ve o class boş olan default const. olsun ve o const. private yap.
classın içeride bir tane instance'sını oluştur ve private yap
bu instancei geri döndürecek olan bir tane fonksiyon yaz.
fonksiyon içerisinde bu instancein null olup olmadığını kontrol etsin
nullsa 1 kez erişiyorsun anlamına gelir ve instance nesnesini oluştur.
eğer null değilse var olan nesneyi döndür.
fonksiyona dışarıdan erişilmesi için önüne static  keywordu koy.

volatile ve synchronized keywordleri olmayan kısım basic kısım.
ama ileride işler karışıcak.o yüzden bil.
synchronized birden fazla thread çalışıyorsa, keywordu yazılı fonksiyona tek tek işlem yaptırır.
1.thread girdi diğer threadleri içeriye almaz. 1.thread bittikten sonra 2.yi alır.
Yani birden fazla thread erişimini engeller.
volatile keywordu ise synchronized keywordunun değişkenler için yapılmasını sağlar
yani tek bir işlemcinin değişkene erişimini sağlar.

Kotlinde başa object yaparsan singletonu kendisi yapar.

OBJECT EXPRESSION

Expression kullanımı -> herhangi bir yapıyı değer ataması yaparak kullanma.
Obje kullanımında da yapılabilir.
Bir nesne oluşturmadan herhangi bir dosya üzerinden başka bir değişkene erişiyorsan orada static kullanım vardır.
Dikkat et.
Expression class içinde de dışında da yazılabilir.
Normalde interfacein nesnesi oluşturulamaz.
Ama arka tarafta o interfacein nesnesi oluşturulur. Önemli performans farkı yaratır.
inline, noinline,crossinline
eğer higher order func birden fazla kez çağrılıyorsa ve interfacei çağırıyorsan memoryde interface nesnesi oluşturulur.
ama başına inline koyuyorsan higher order fonksiyonun nesnesi birden fazla kez oluşturulmaz.Performans farkı yaratır

Objeyi expression olarak kullanıyorsanız isimsiz class veya isimsiz interfaceler(anonymous) oluşturuyorsunuz.
showkotlin kodundan bak. Kullan-at classlar denir.
Eğer 1 tane supertype kullanıyorsan tipini vermek zorunda değilsin.
2tane superType kullanıyorsanız expression kullanımında tipini söylemen gerek.
interfacede supertypedır
Tipe class dersen classın içindekilerin çağırımını yaparsın, interfacei çağıramazsın.
Tipe interface dersen interface'in içindekilerin çağırımını yaparsın.Classı çağıramazsın.
Dışarıya açmak istemediğin bir yapıyı object expression ile kullanabilirsin. Reflection'u engelleyebilirsin.
Kütüphane yazarken sınırlamaları sağlaması konusunda fayda sağlar.
Dolaylı yoldan multi inheritance sağlatıyor

COMPANION OBJECT

class içine object yazılmaz. Bunun yerine companion object kullanılır.
classın tamamını singleton yapmak istemiyorsan, bir kısmını istiyorsan companion object kullan.
Static olarak memoryde yer kaplar. Classın ismi nokta diyerek herhangi bir değişken veya fonksiyona erişir.
Kotlinde singleton yaparken thread safe yapamıyorduk direkt. Bunu companion object ile sağlayabilirsin.
DeCompile ettiğimizde companion object içerisinde olan değişkenler static final olarak bulunur.
classın nesnesini oluşturmadan fonksiyona erişiyoruz bu da static olarak tutulur.
isim verebilirsin. inherit ve implement edebilir.
interfaceler state tutmaz. Backing fielde erişemez. Companion object ekleyerek interface içerisinde state tutulabiliyor.
Ama kullanmayın interface amacının dışına çıkıyorsunuz.