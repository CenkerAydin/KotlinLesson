FUNCTIONS BASICS

fun keyword'u ile fonksiyonlar başlar.
fonksiyon ismi verilir.
parametre parantezleri açılır ve parantezler girilir.
:Operatoru ve geri dönüş değeri yazılır.
Fonksiyon body'si açılır ve kapatılır.
Geri dönüş değeri verilmeyen fonksiyonlar Unit tipini geri döndürür.
Unit ->boş,javada void gibi bir şey döndürmez

Fonksiyon çağrılırken ismi ve parametreleri kullanılır.
Eğer bir geri dönüşü varsa bir değişkene atabilir.
Fonksiyon kullanmak ilerde yapılabilecek değişiklikler için zaman kaybını önler.
Fonksiyon parametresi tanımlanırken,val var gibi betimleyiciler kullanılmaz.

Bir class'ın fonksiyonunu cağırırken ise nokta işaretini kullanırız
Math.pow(2.0,3.0)

= ile fonksiyonlara default değer verilebilir.(Default Argument)
Default değer ataması yapmak function overload işlemi yapmamızı sağlar.
Tekrar tekrar aynı fonksiyonun farklı varyasyonlarını yazmak durumunda kalmayız.
Default değeri olan parametrelere sahip bir fonksiyon çağırılırken,default değeri olan parametrelere değer atamak
şart değildir.Default değeri olan bu parametreler opsiyonel parametrelerdir.

Fonksiyon Overload
Fonksiyon ismi aynı,parametre sayısı farklı veya parametre sayısı aynı ama dönüş tipi farklı

Default değeri olan parametrelere değer atanmadan fonksiyon cağırılacaksa bu durumda parametre sırası değişir.
Ide'ye hangi  parametreye değer atadığınızı söylemek için Named Argumentsleri kullanmanız gerekir

Çok uzun sayıda parametreniz olacaksa "variable number of arguments" -vararg tanımlanabilir.
Bu sayede fonksiyon tek bir parametre alıyor gibi gozukurken kendisine çok miktarda değişken atanabilir.
Bu değişkenlere array'e erişir gibi erişebilirsiniz. [index] ya da .get(index) şeklinde.
Aynı fonksiyon içerisinde birden fazla vararg tanımı yapılmasına izin verilmez.
vararg tek ya da son parametre olarak yazılırsa ,JVM e hazırlanırken, javadaki "String..." gibi aynı kod derlenir.
Ancak vararg param birden fazla tanımlanırken ortada ya da başta yer alırsa JVM e hazırlanırken Arraye donusturerek derlenir.
Bu da performans farkı oluşturur demektir.

vararg parametresi olarak arrayOf kullanılmak istenirse * operatoru eklenmelidir.(Spread Operatoru)
bu operator diğer dillerdeki pointer kullanımı anlamına gelmez.Kotlinde pointerlar yok.
Clean Code prensibinde parametre sayınız 7yi geçmesin derler.Geçerse ya vararg kullan ya da data classından al parametreyi.

Bir fonksiyona = koyularak da return edeceği değer yazılabilir.Tek satırda(Single Expression kullanımı)

Default değeri olan parametrelere sahip bir fonksiyon java sınıflarından çağırılacaksa eğer
bu fonksiyona @JvmOverloads annotation'i verilmelidir.Boylece yazılan kod Jvm'e hazırlanarak çevrilir.
İlgili fonksiyonun tum varyasyonları yazılır(Overload edilir.)

FUNCTION SCOOPE

Bir fonksiyon herhangi bir sınıfın içerisinde değil de bir dosyasının içerisinde boşlukta tanımlanıyorsa
top level function adını alır.
Bir fonksiyon oluştururken top level tanımlama yapılamıyor, sadece bir sınıfa ait fonksiyonlar yazılabiliyorsa
bunlara fonksiyon değil,method denir.Bir fonksiyonun fonksiyon diyebilmemiz için top level tanımlanabilir olması lazım.

Fonksiyon içerisinde fonksiyon tanımı kotlin'de yapılabilir.Bu fonksiyonlara Local Functions denir.
Sebebi ise,yazdığınız fonksiyonun kendi sınıfınızdan dahi çağrılmamasını istemeyebilirsiniz.
Bu fonksiyonun herhangi bir başka fonksiyon ya da sınıf için değiştirilmesini istemeyebilirsiniz.
Reflection ile fonksiyonlarınız erişilirken gizli kalsın isteyebilirsiniz.
Bu gibi durumlrda bu çok önemli fonksiyonunuzu başka bir fonksiyon içerisine yazabilirsiniz.

Bir sınıfın içerisindeki fonksiyonlara , uye fonksiyonlar denir.

Bir fonksiyon Generic tip alıyorsa,Generic Function denir.

INFIX FUNCTIONS

Daha okunaklı kodlar yazmak için kullanılır.
. (nokta) kullanımı kaldırır.
true or false ->Infix kullanımı
true.or(false)
Bir fonksiyonu infix hale getirebilmek için 5 şart vardır.
1.infix keywordu ile başlar.
2.Fonksiyon bir uye fonksiyon olmalıdır.(Bir sınıfa ait olmalıdır)
3.Ya da bir extension fonksiyon olmalıdır.
4.Sadece bir parametre almalıdır.Bu parametre vararg olamaz.
5.infix method'un parametresi default değer alamaz.

yapısal olarak
infix fun infixMethod(juseOne:AwesomeParam):Whatever{

}

and, or, xor gibi onlarca infix methodu vardır.

Bir sınıfın içindeyken this kullanımı size bulunduğu sınıfı işaret eder.

Bir sınıfın dışındayken infix method çağırımı yapılırsa this kullanılamaz.

HIGHER ORDER FUNCTIONS

Fonksiyonlar kotlinde "First Class Citizen"dır.Yani değişkenlere değer olarak atanabilir
Başka fonksiyonlara parametre olarak verilebilir, ya da bir fonksiyonun geri donuş değeri olabilir.

Higher Order Functionlar basitce bir fonksiyona parametre olarak verilen fonksiyonlardır.Parametre olarak
verilmekten kasıt, fonksiyonun çağrımının parametre kısmında yapılması değil, fonksiyonun bodysinin
başka bir fonksiyona parametre olarak verilmesidir.

yapısal olarak

fun foo(higherOrderFunction: (message:String) ->Unit){
higherOrderFunction("Cenk")
}

fun boo(boo:String){

}

çağırılırken

fun main(){
    boo("Merhaba")

    foo({message ->
    println("Message : $message")
})
}

Higher Order Functionlari tanımlamanın 3 yolu vardır.
1.Bir değişkene atayarak hof tanımlayanabilirsiniz.
Bu durumda süslü parantezler yanına higher order functionın aldığı parametreler
lambda okundan once aralarına virgül koyularak yazılır.Higher Order Function tek parametre alıyorsa
bu parametreleri yazmak zorunda deilsin.
Bu durumda hof size "it" kelimesi ile hofın parametresi tipinde bir değişken verecektir.

2.İsmi olmayan "anonymous function" tnaımlamaları da Higher Order Function olarak, normal bir fonksiyon
parametre olarak verilebilir.

Anonymous function expression kullanımını da yine hof olarak normal bir fonksiyona parametre
olarak verilebilir.

3.Higher Order Functionla aynı parametre sayısına sahip ve bu parametrelerin hepsinin tipleri Higher Order Function
parametre tipleri ile aynı ise, bu normal fonksiyon da higher order function olarak normal bir fonksiyona parametre olarak verilebilir
Bunu yapmak için sadece başına :: işareti koymak yeterlidir.

Suslu parantezler(body) direkt olarak Higher Order Functionin parametre olarak beklendiği alana da yazılabilir.

Eğer bir fonksiyon parametreleri içerisinde bir Higher Order Function son parametre olarak tanımlanmak isteniyorsa,
bu Higher Order Function, fonksiyon parametrelerinin dışına da yazılabilir.Daha temiz görünüm olur.

Higher Order Function birden fazla parametre içeriyorsa ,aralarına virgul koyarak lambda işareti ile tanılama yapılır.
Tek parametreye sahipse bu durumda parametre ismi ve lambda işareti koyulmayabilir.

Higher Order Functiona parametre tanımlanırken sadece değişken tipini tanımlayarak da(değişken adı olmadan) yazılabilir.

Bir higher Order Function, parametre olarak yazıldıktan sonra, bu parametrenin normal fonksiyon içerisinde çağırılması gerekmekte.
Aksi halde bu higher order fonksiyonu tanımlamak mantıksız olur.

Bir higher order functionina parametre verirken Class ismi.() şeklinde tanımlama yapılabilir.
Bu sayede ilgili class da parametre parantezi içerisine yazılabilir.